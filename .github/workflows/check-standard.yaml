on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{matrix.config.curl}}${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'oldrel'}
          - {os: windows-latest, r: 'release'}
          - {os: macOS-latest,   r: 'release'}
          - {os: ubuntu-16.04,   r: 'release', curl: "curl", rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          - {os: ubuntu-18.04,   r: 'release', curl: "curl", rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}
          - {os: ubuntu-20.04,   r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-20.04,   r: 'release', curl: "curl", rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-20.04,   r: 'devel', curl: "curl", rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
      - uses: r-lib/actions/setup-pandoc@master

      - name: Install libtiff (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install libtiff-dev libjpeg-dev zlib1g-dev

      - name: Install libtiff (Ubuntu 20.04)
        if: matrix.config.os == 'ubuntu-20.04'
        run: sudo apt-get install libwebp-dev libzstd1

      - name: Install curl (Linux)
        if: runner.os == 'Linux' && matrix.config.curl == 'curl'
        run: sudo apt-get install libcurl4-openssl-dev

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-2-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-2-

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Show install output
        if: always()
        run: find check -name '00install.out*' -exec cat '{}' \; || true
        shell: bash

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Install package
        run: |
          remotes::install_cran("fs")
          # outdated version of libproj
          if (dir.exists(file.path(.libPaths()[1], "libproj"))) {
            unlink(file.path(.libPaths()[1], "libproj"), recursive = TRUE)
          }
          fs::dir_copy("check/libproj.Rcheck/libproj", file.path(.libPaths()[1], "libproj"))
        shell: Rscript {0}

      - name: Checkout hypertidy/PROJ
        uses: actions/checkout@v2
        with:
          repository: hypertidy/PROJ
          ref: libproj
          path: 'PROJpkg'

      - name: Install system dependencies (PROJ)
        if: runner.os == 'Linux'
        run: sudo apt-get install libicu-dev

      - name: Check hypertidy/PROJ
        env:
          _R_CHECK_CRAN_INCOMING_: false
          _R_CHECK_FORCE_SUGGESTS_: false
        run: |
          remotes::install_cran(c("knitr", "rmarkdown", "spelling"))
          rcmdcheck::rcmdcheck("PROJpkg", args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check_PROJ")
        shell: Rscript {0}

      - name: Show testthat output (hypertidy/PROJ)
        if: always()
        run: find check_PROJ -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-${{ matrix.config.curl }}-results
          path: check
